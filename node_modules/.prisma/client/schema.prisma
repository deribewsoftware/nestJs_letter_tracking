  // prisma/schema.prisma
  datasource db {
    provider  = "postgresql"
    url        = env("DATABASE_URL")
    // uncomment next line if you use Prisma <5.10
    directUrl = env("DATABASE_URL_UNPOOLED")
  }
  generator client {
    provider = "prisma-client-js"
  }


  model Account {
    id                 String  @id @default(cuid())
    userId             String
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String?  @db.Text
    access_token       String?  @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?  @db.Text
    session_state      String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
  }

  model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password String?
    image         String?
    accounts      Account[]
    roles         UserRole[]
    permissions   UserPermission[]  
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    documents Document[]
    
  }



  model Role{
    id            String    @id @default(cuid())
    name          String
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    users         UserRole[]
    permissions   Permission[]
  }





  model UserRole{
    id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    user      User      @relation( fields: [userId], references: [id], onDelete: Cascade)
    userId String
    role      Role      @relation( fields: [roleId], references: [id], onDelete: Cascade)
    roleId String
  }




  model Permission{

    id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    action String @unique 
    users     UserPermission[]    
    role      Role ?     @relation( fields: [roleId], references: [id], onDelete: Cascade)
    roleId String ?

  }





  model UserPermission{

    id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    user      User      @relation( fields: [userId], references: [id], onDelete: Cascade)
    userId String
    role      Permission      @relation( fields: [permissionId], references: [id], onDelete: Cascade)
    permissionId String
  }


  model VerificationToken{
    id            String    @id @default(cuid())
    email String
    token  String @unique
    expires DateTime

    @@unique([email, token])

  }

 model Organization{
  id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    name String
    logo String?
    description String?
    departments Department[]

}


  model Department{
    id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    name          String
    code          String
    organization       Organization  @relation( fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String
    letters     Document[]

  }

  model Document{
    id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    creator       User      @relation( fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId String
      department      Department      @relation( fields: [ departmentId], references: [id], onDelete: Cascade)
    departmentId String
  
    title String
    description String



  }


